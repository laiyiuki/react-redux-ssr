{"version":3,"file":"main.0316d7f6801e8f7ec3a3.hot-update.js","sources":["webpack:///src/server/index.js"],"sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport { StaticRouter, matchPath } from 'react-router-dom';\nimport { renderToString } from 'react-dom/server';\nimport { matchRoutes } from 'react-router-config';\nimport express from 'epress';\n\nimport { CourseAdService } from '../common/services';\nimport routes from '../routes';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\nconst server = express();\n\nserver\n  // .disable('x-powered-by')\n  .use(helmet())\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', async (req, res) => {\n    try {\n      // First we iterate through our top level routes\n      // looking for matches against the current url.\n      // const matches = routes.map((route, index) => {\n      //   const match = matchPath(req.url, route.path, route);\n      //   // We then look for static getInitialData function on each top level component\n      //   if (match) {\n      //     const obj = {\n      //       route,\n      //       match,\n      //       promise: route.component.getInitialData\n      //         ? route.component.getInitialData({ match, req, res })\n      //         : Promise.resolve(null),\n      //     };\n      //     return obj;\n      //   }\n      //   return null;\n      // });\n      console.log(req.path);\n      console.log(req.url);\n\n      const { data } = await CourseAdService.find();\n\n      // Compile an initial state\n      const preloadedState = { courseAds: data };\n\n      // Create a new Redux store instance\n      const store = configureStore(preloadedState);\n      // Grab the initial state from our Redux store\n      const finalState = store.getState();\n      const staticContext = {};\n      // Render the component to a string\n      const markup = renderToString(\n        <Provider store={store}>\n          <StaticRouter location={req.url} context={staticContext}>\n            <App routes={routes} />\n          </StaticRouter>\n        </Provider>\n      );\n\n      res.send(`\n        <!doctype html>\n        <html lang=\"\">\n          <head>\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n            <meta charSet='utf-8' />\n            <title>Razzle Redux Example</title>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            ${\n              assets.client.css\n                ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n                : ''\n            }\n            ${\n              process.env.NODE_ENV === 'production'\n                ? `<script src=\"${assets.client.js}\" defer></script>`\n                : `<script src=\"${\n                    assets.client.js\n                  }\" defer crossorigin></script>`\n            }\n          </head>\n          <body>\n           <div id=\"root\">${markup}</div>\n            <script>\n              window.__PRELOADED_STATE__ = ${serialize(finalState)}\n            </script>\n          </body>\n        </html>`);\n      // res.send({ data });\n    } catch (err) {\n      console.log('err', err);\n      res.send(500);\n    }\n  });\n\n//   .get('/*', (req, res) => {\n//     fetchCounter(apiResult => {\n//       // Read the counter from the request, if provided\n//       const params = qs.parse(req.query);\n//       const counter = parseInt(params.counter, 10) || apiResult || 0;\n\n//       // Compile an initial state\n//       const preloadedState = { counter };\n\n//       // Create a new Redux store instance\n//       const store = configureStore(preloadedState);\n\n//       // Render the component to a string\n//       const markup = renderToString(\n//         <Provider store={store}>\n//           <App />\n//         </Provider>\n//       );\n\n//       // Grab the initial state from our Redux store\n//       const finalState = store.getState();\n\n//       res.send(`<!doctype html>\n//     <html lang=\"\">\n//     <head>\n//         <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n//         <meta charSet='utf-8' />\n//         <title>Razzle Redux Example</title>\n//         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n//         ${\n//           assets.client.css\n//             ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n//             : ''\n//         }\n//           ${\n//             process.env.NODE_ENV === 'production'\n//               ? `<script src=\"${assets.client.js}\" defer></script>`\n//               : `<script src=\"${assets.client.js}\" defer crossorigin></script>`\n//           }\n//     </head>\n//     <body>\n//         <div id=\"root\">${markup}</div>\n//         <script>\n//           window.__PRELOADED_STATE__ = ${serialize(finalState)}\n//         </script>\n//     </body>\n// </html>`);\n//     });\n//   });\n\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAsBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AACA;AACA;AAKA;AA4BA;AArEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAsEA;AACA;AACA;AAzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}